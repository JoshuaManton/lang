proc __trap() #foreign;
proc __print_int(n: int) #foreign;

proc print(n: int) {
    __print_int(n);
}

proc assert(condition: bool) {
    if (condition == false) {
        __trap();
    }
}

var aa: int;
var bb: int;
var cc: int;

proc factorial(n: int) : int {
    if (n == 1) {
        return 1;
    }
    return n * factorial(n-1);
}

struct Vector3 {
    x: int;
    y: int;
    z: int;
}

proc main() {
    var v: Vector3;
    v.x = 1;
    v.y = 4;
    v.z = 9;
    print(v.x);
    print(v.y);
    print(v.z);

    aa = 5;
    aa = factorial(aa);

    const Six: int = 6;
    bb = factorial(Six);

    // const My_Int: typeid = int;

    cc = aa + bb;

    var x: int = factorial(10);

    assert(aa == 120);
    aa += 5;
    assert(aa == 125);
    aa -= 3;
    assert(aa == 122);
    aa *= 2;
    assert(aa == 244);
    // todo(josh): divide
    // aa /= 4;
    // assert(aa == 61);

    assert(bb == 720);
    assert(cc == 840);
    assert(x == 3628800);

    print(aa);
    print(bb);
    print(cc);
}




























